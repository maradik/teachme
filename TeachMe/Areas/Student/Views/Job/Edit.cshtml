@using TeachMe.Models
@using TeachMe.References
@model TeachMe.Models.Jobs.Job

@{
    ViewBag.Title = "Редактирование задачи: " + Html.Encode(Model.Title);
}

<h2>Редактирование задачи</h2>


@using (Html.BeginForm("Edit", "Job", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.SubjectId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.SubjectId, ((Subject[])ViewBag.Subjects).Select(x => new SelectListItem { Value = x.Id.ToString(), Text = x.Title }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SubjectId, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", style = "min-height: 100px;" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StudentCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StudentCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Attachments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="row gallery-container">
                    @for (var i = 0; i < Model.Attachments.Count; i++)
                    {
                        @Html.EditorFor(model => model.Attachments[i])
                    }
                </div>
                <div id="uploadedFileInputContainer"></div>
                @Html.ValidationMessageFor(model => model.Attachments, "", new {@class = "text-danger"})
                <div><a href="#" id="addUploadedFile">Добавить</a>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Сохранить" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Назад к списку", "Index") |
    @Html.ActionLink("Назад к задаче", "Details", new { id = Model.Id })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function() {
            initUploadedFileBlock();
        });
    </script>
}
